-- List of map names and corresponding script URLs
local mapScripts = {
    ["Dungeon Mini Game"] = "https://raw.githubusercontent.com/frites1111/hidaki-hub-2/main/11468075017",
    ["Mugen"] = "https://raw.githubusercontent.com/frites1111/hidaki-hub-2/main/11468034852",
    ["Map 1 Public"] = "https://raw.githubusercontent.com/frites1111/hidaki-hub-2/main/17387475546",
    ["Map 1 Private"] = "https://raw.githubusercontent.com/frites1111/hidaki-hub-2/main/13883279773",
    ["Map 2 Public"] = "https://raw.githubusercontent.com/frites1111/hidaki-hub-2/main/17387482786",
    ["Map 2 Private"] = "https://raw.githubusercontent.com/frites1111/hidaki-hub-2/main/13883059853"
}

-- Function to get the current map name (make sure to adjust this depending on your game structure)
local function getCurrentMap()
    -- Replace this with your actual logic to get the map's name
    -- For example, check the name of the map or any identifier in your game
    if game.Workspace:FindFirstChild("Map") then
        return game.Workspace.Map.Name
    else
        return "Unknown Map"
    end
end

-- Load the script for the current map
local function loadMapScript()
    local currentMap = getCurrentMap()
    
    if mapScripts[currentMap] then
        local scriptUrl = mapScripts[currentMap]
        
        -- Fetch the script content
        local scriptContent = game:HttpGet(scriptUrl)
        
        -- Load and run the script
        local success, result = pcall(function()
            loadstring(scriptContent)()
        end)
        
        if not success then
            warn("Error executing the script for map: " .. currentMap .. ". Error: " .. result)
        end
    else
        warn("No script found for map: " .. currentMap)
    end
end

-- Run the function to load the correct map script
loadMapScript()
